==>Olusturacagimiz framework data driven yani veri odakli bir framework olacak.
==>Framework nedir?
    - Bir ekibin islerini yapma seklini belirleyen ortak bir standarttir.
    - Kod tekrarindan kacinmayi amaclar.
    - Anlamli raporlandirmalar yapabilmeyi mumkun kilar.
    - Aksiyonlari gizleme (encapsulation) prensibine odaklanir.
    - Kodun okunabilir ve bakiminin kolay olmasini hedefler.
    - Kodlama standartlarina uymayi saglar.
    Iyi tasarlanmis bir sistemin birincil dusmani duplikasyondur. Robert Morin - Clean Code Collection
    DRY Prensibi-->Don't Repeat Yourself
==>Page Object Model nedir?
    web sayfasi(test edilen uygulama)-->Page Object(Web elementleri ve methodlar)-->Test Class(Test Methodlari)
    1- POM farkli framework yapilari ile uyumludur. Yani POM icin farkli framework yapilari ile de kullanilabilecek bir
        dizayndir diyebiliriz. Veri odakli(data driven) ya da davranis odakli(behavior driven) framework tarzlari ile 
        uyumludur.
    2- Test class'lari ile web ogelerinin ve methodlarin olusturdugu class larin farkli class lar olmasi hedeflernir
        ve istenir. Ayrica datalarin koddan ayri olarak saklanmasi genel olarak beklenilen bir seydir.
    3- Veri odakli testler;
        -Frakli veri setleriyle uygulamanin test edilmesini saglar ve bu da yapilan testlerin etkinliginin artmasina
        ve sonuc olarak testten beklendigi gibi uygulamaya olan guvenin artirilmasina olanak saglar.
==>Framework Olusturma Adimlari;
    1- Yeni bir klasor olusturduk ve vscode'de klasoru actiktan sonra terminalde npm init komutunu girdik. Bu komutu
    girdikten sonra framework'te package.json dosyasi olustu.
    2- npm install cypress komutu ile cypress'i yukledik. Yukleme tamamlandiginda node_modules ve package-log.json
    dosyalari olustu.
    3- npx cypress open ile cypress'i actik. Ilk defa acinca cypress isimli bir klasor bunun icerisine e2e, support
    fixture klasorlerini support'un altinda command.js ve e2e.js dosyalarini ve framework'un ana yapisina cypress.config.js
    dosyalarini olusturmus olduk.
==>Bu framework'te calismalar yaparken https://practicesoftwaretesting.com/#/ adresini kullanacagiz. Bu sitenin 
    gelistiricileri bir github reposu ile siteye iliskin bilgileri paylasmislar. Istenirse API testi icin kullanilacak
    swagger dokumanina bu github reposu araciligi ile ulasilabilir.
==>Support'un altinda pages isimli bir klasor olusturduk. Bu klasorun icerisine .js uzantili js dosyalari ekleyerek
    calistigimiz ilgili sayfadan aldigimiz locate'leri ustte methodlari ise daha asagida konumlandirmanin uygun 
    olacagi soylendi. Burada farkli kullanim ihtimalleri soz konusu olabiliyor. 
        - Ilk olarak bir class olusturuyoruz ve bu class in icerisinde ustte locate'ler altta methodlar oluyor. Burada
        locate alma islemi bir method icerisinde yapiliyor ve alttaki methodlarla calisirken this.locateAlinanMethodIsmi()
        diyerek calisiyoruz. Yani locate almak icin de method olusturuyoruz. Hocanin tavsiyesi ise bunun yerine;
        - class icerisinde bir constructor olusturup locateleri bu constructor icerisinde bir degiskene deger olarak
        atamak ve asagidaki aksioyn methodunda bu degiskeni kullanarak yapilmak istenen aksiyonu gerceklestirmek.
        Burada degiskeni tanimlarken ve asagida cagirirken this. yapisini kullaniyoruz.
    -->Yazdigimiz methodlari test class larinda nasil kullanacagiz? Burada da farkli kullanimlar soz konusu olabiliyor.
        Ilk olarak bilinmesi gereken bir class'ta bulunan methodlari kullanabilmek icin o class'tan object olusturmamiz
        gerektigidir. Bu object olusturma islemini test class'inda yapabilecegimiz gibi dogrudan methodlarin bulundugu
        class'ta da yapabiliriz. Dogrudan methodlarin bulundugu class'ta object olusturarak devam etmek daha pratik
        olabilir. Bunun icin asagidaki gibi bir object olusturmak gerek;
            const registerPage-object adi- = new RegisterPage()-class adi-;
==>Akilli kod yazma destegi icin tsconfig.json dosyasini cypress klasorunun altina ekledik.
==>baseUrl ekleme islemi;
    cypress.config.js dosyasinda e2e icerisine baseUrl anahtar kelimesi ile baseUrl' i ekledik. cy.visit icerisinde '/'
    seklindeki kullanim dogrudan baseUrl'e baglanmamizi sagliyor.
==>Environment olusturma;
    cypress.config.js dosyasinda baseUrl'in alt kismina env ismi ile bir alan olusturduk ve bunun icerisinde farkli 
    degiskenler olusturuyoruz. Ornegin register sayfasinin baseUrl den sonraki pathParam larini register ismi ile buraya
    ekledik ve cy.visit icerisinde cy.visit('/' + Cypress.env('register')); seklinde kullanim ile baseUrl in devamina
    ilgili pathParam lari eklemis olduk.
==> Fail olan testlerin tekrar kosulmasi:
    
==>Faker kurulumu;
    npm install faker --save-dev @faker-js/faker komutu ile eklenti kurulur.
    e2e.js dosyasina require('@faker-js/faker') kodu eklenir